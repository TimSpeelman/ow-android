{"version":3,"sources":["assets/images/qr-scan.svg","hooks/useMenu.tsx","hooks/useServices.tsx","components/Icon.tsx","components/Sidemenu.tsx","util/fallbackBool.ts","components/Button.tsx","components/CredentialCard.tsx","components/SubpageHeader.tsx","hooks/useInternationalization.tsx","pages/VerifieeConsentPage.tsx","demo.tsx","components/SelectInput.tsx","hooks/useLocalState.tsx","pages/CredentialCreatePage.tsx","pages/ProcedureDonePage.tsx","hooks/useSelector.ts","util/memoizeFn.ts","services/local/selectors.ts","pages/ReceiveAttributesPage.tsx","services/RequestProcedureFlowRunner.ts","pages/ShareRequestPage.tsx","util/Hook.ts","services/ProviderService.ts","services/AttributeService.ts","services/local/LocalAPI.ts","services/local/LocalState.ts","services/OpenWalletService.ts","util/timer.ts","util/Interval.ts","services/ReferenceService.ts","services/services.ts","flows/CredentialCreateFlow.tsx","services/CredentialVerifyFlowRunner.ts","pages/VerifierConsentPage.tsx","flows/CredentialVerifyFlow.tsx","modules/QR/GenericDecoding.ts","pages/ConfirmContactPage.tsx","pages/ConfirmIncomingVerificationPage.tsx","pages/ContactDetailPage.tsx","components/ContactCard.tsx","pages/ContactIndexPage.tsx","components/BottomTools.tsx","modules/QR/QREncoding.ts","services/QRService.ts","pages/CredentialDetailPage.tsx","hooks/usePromised.ts","hooks/useQR.ts","hooks/useClock.ts","components/HomepageHeader.tsx","pages/CredentialIndexPage.tsx","pages/QrReaderPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Context","createContext","useMenu","useContext","useServices","Icon","children","props","className","Object","keys","Sidemenu","open","setOpen","toggleMenu","v","bools","find","b","fallbackBool","isOpen","SidemenuNo","path","classNames","onClick","times","to","id-card","users","info-circle","cog","Button","isPending","primary","classnames","pending","secondary","CredentialCard","p","style","width","src","imageUrl","alt","title","issuerName","withQRs","onDisplayQR","qrcode","showDetails","value","qrValue","text","size","level","showMeta","metadata","map","e","key","toString","SubpageHeader","openMenu","SubpageHeaderNo","backUrl","chevron-left","pageTitle","bars","useInternationalization","VerifieeConsentPage","request","onSubmitConsent","fromLanguageDict","useState","setPending","handleSubmit","consent","attrs","success","resolve","attributes","filter","a","status","results","ambiguous","missing","length","attribute","name","hash","signer_mid_b64","disabled","DemoPage","verifier_id","ref","format","responses","SelectInput","onChange","target","emptyMessage","hidden","options","o","label","useLocalState","CredentialCreatePage","onSubmitRequest","langCode","state","provider","setProvider","procedure","setProcedure","provOnline","useEffect","providers","useMemo","id","sort","formatProviders","procedures","provId","prov","values","recipes","recipe","formatRecipes","ProcedureDonePage","messageTitle","messageBody","_s","useSelector","selector","context","console","log","memoizeUnary","fn","thisArg","cachedI","cachedO","arg","undefined","apply","getAttributes","getProviderByMid","getProviders","mid","mid_b64","Step","Status","ReceiveAttributesPage","receiveRequest","attributesToReceive","logo_url","ShareRequestPage","shareRequest","receiver","allAttributes","attributesToShare","attributeNames","Hook","listeners","this","forEach","l","listener","push","unsubscribe","hook","on","fire","OnlineStatus","RequestProcedureFlowRunner","providersService","walletService","attributeService","step","INIT","PENDING","hookStep","hookUserConsentToReceive","hookStatus","providerKey","procedureKey","message","requirements","executeProcedure","askUserToShare","abortProcedure","saveReceivedCredentials","setStep","SHARE","onConsent","data","askUserToReceive","Promise","requestOWAttestSharingApproved","result","storeAttribute","showMessage","setStatus","COMPLETE","done","ABORTED","error","FAILED","reason","RECEIVE","DONE","msg","verify_request","AttributesService","attr","s","store","LocalAPI","axios","JSON","parse","localStorage","getItem","setItem","stringify","LocalState","localApi","stateChangeHook","_state","fetch","getState","then","response","updateState","putState","newState","OpenWalletService","localState","ipv8","recipeClient","providerId","procedureId","onConsentStore","dataToShare","indexOf","reduce","c","process","createProcess","api","listAttestations","myAtts","vResp","i","x","attribute_name","attribute_hash","request_hash","subject_id","myId","allowVerification","recipeRequest","createRequest","Axios","post","service_endpoint","httpResponse","offer","attester_id","validateOffer","warn","requestAttestation","attrDesc","time","Date","now","provider_title","type","Error","ProviderService","online","ONLINE","pingForOnline","timeInMillis","race","getByURL","url","catch","setTimeout","isOnline","OFFLINE","get","r","details","addOrUpdate","Interval","index","intervalHandle","handler","ms","setInterval","clearInterval","ReferenceService","handles","handle","ReferenceHandle","onDestroy","removeHandle","h","references","freshRefHook","invalidationHook","destroyHook","interval","listen","createNewReference","millis","start","stop","stopRefreshing","expireReference","uuid","millisToExpire","destroyWhenNoReferences","destroy","portFromUrl","window","location","match","cookie","Cookies","port","set","localhostBase","localAPI","create","baseURL","ipv8Service","IPv8","IPv8Service","callbackService","peercalls","memberId","refId","resolveReference","flow","owService","CredentialCreateFlow","pv","pc","userStartsRequest","userConsentsToShare","userConsentsToReceive","VerifierConsentPage","verificationOffer","attribute_value","CredentialVerifyFlowRunner","verifierService","verifyOffer","CONFIRM","verify","showVerificationResult","DecodeStatus","CredentialVerifyFlow","services","userConsentsToVerify","MultiDecoder","decoders","obj","decode","Succeeded","Failed","Unmatched","DecoderChain","decodeA","decodeB","ConfirmContactPage","description","website","confirmRequest","denyRequest","React","Component","ConfirmIncomingVerificationPage","ContactDetailPage","providerMid","href","ContactCard","logoUrl","ContactIndexPage","contactUrl","setContactUrl","encodeURIComponent","onSubmit","addByURL","alert","finally","saveContact","placeholder","required","BottomTools","showQR","fontSize","require","showPlus","plus","QRDecodeError","QRX","payload","decodeSucceded","decodeFailed","MultiQRDecoder","stringDecoder","domainDecoders","decoder","str","SimpleQRStringCodec","qrx","split","INVALID_FORMAT","VerificationOfferCodec","TYPE","d","INVALID_PAYLOAD","qrDecoder","encodeVerifOffer","encoder","strEncoder","encode","makeEncoder","CredentialDetailPage","useReferenceQR","myMid","promisable","setResult","usePromised","getMyId","selectedQR","setSelectedQR","onPeerScan","callbackId","referenceForPeer","callback","setValue","register","onNewReference","refreshAtInterval","refreshIntervalMillis","destroyOnUnmount","useCallbackReference","millisPerTick","setTime","useClock","expiresAt","expirationInSeconds","HomepageHeader","HomepageHeaderNo","CredentialIndexPage","QrReaderPage","onScanQR","lastScan","setLastScan","manualInput","setManualInput","showManual","setShowManual","delay","onError","err","onScan","AppBody","ready","history","useHistory","SpecificCredentialVerifyFlow","SpecificCredentialDetailPage","SpecificContactDetailPage","val","res","params","useParams","decodeURIComponent","Boolean","hostname","root","initServices","setContext","setError","Provider","owVerifiee","OpenWallet","OWVerifiee","verifieeService","owAttestee","OWAttestee","attesteeService","Recipe","RecipeClient","priority","fallbackLangs","setLanguage","translate","dict","availableLanguages","chosenLanguage","available","lang","pickLanguage","setState","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.17bbb405.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/qr-scan.c24fd00a.svg\";","import React, { createContext, useContext, useState } from \"react\";\r\n\r\n/** The Context object available to consumers */\r\nexport interface MenuContext {\r\n    open: boolean;\r\n    setOpen: (to: boolean) => void;\r\n}\r\n\r\n// Create a react context with dummy default value\r\nconst Context = createContext<MenuContext>({} as MenuContext);\r\n\r\nexport const MenuContextProvider: React.FC = ({ children }) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const context = {\r\n        open,\r\n        setOpen,\r\n    }\r\n\r\n    return <Context.Provider value={context}>{children}</Context.Provider>\r\n}\r\n\r\nexport const useMenu = () => {\r\n    return useContext(Context);\r\n};\r\n\r\n","import { IPv8 } from \"@tsow/ow-ssi\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { AttributesService } from \"../services/AttributeService\";\r\nimport { LocalAPI } from \"../services/local/LocalAPI\";\r\nimport { LocalState } from \"../services/local/LocalState\";\r\nimport { OpenWalletService } from \"../services/OpenWalletService\";\r\nimport { ProviderService } from \"../services/ProviderService\";\r\nimport { ReferenceService } from \"../services/ReferenceService\";\r\nimport { PeerCallback } from \"../services/services\";\r\n\r\n/** The Context object available to consumers */\r\nexport interface ServiceList {\r\n    localAPI: LocalAPI;\r\n    localState: LocalState;\r\n    ipv8Service: IPv8.IPv8Service;\r\n    attributeService: AttributesService;\r\n    callbackService: ReferenceService<PeerCallback>;\r\n    providersService: ProviderService;\r\n    owService: OpenWalletService;\r\n}\r\n\r\nexport interface ServicesContext {\r\n    ready: boolean;\r\n    error: boolean;\r\n    services: ServiceList | null;\r\n    path: string;\r\n}\r\n\r\n\r\n// Create a react context with dummy default value\r\nconst Context = createContext<ServicesContext>({} as ServicesContext);\r\n\r\nexport const ServicesContextProvider: React.FC<Props> = ({ children, initServices, path }) => {\r\n    const [services, setContext] = useState<ServiceList | null>(null);\r\n    const [error, setError] = useState<any>(null);\r\n\r\n    useEffect(() => {\r\n        initServices().then(s => setContext(s)).catch(setError);\r\n    }, []);\r\n\r\n    const context = {\r\n        ready: !!services,\r\n        error,\r\n        services,\r\n        path\r\n    }\r\n\r\n    return <Context.Provider value={context}>{children}</Context.Provider>\r\n}\r\n\r\nexport const useServices = () => {\r\n    return useContext(Context);\r\n};\r\n\r\ninterface Props {\r\n    initServices: () => Promise<ServiceList>\r\n    path: string;\r\n}","import React from 'react';\r\n\r\nexport const Icon: React.FC<any> = ({ children, ...props }) => (\r\n    <span className={`fas fa-${Object.keys(props)[0]}`}></span>\r\n)\r\n\r\ninterface Props {\r\n    children: string;\r\n}","import classNames from \"classnames\";\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMenu } from \"../hooks/useMenu\";\r\nimport { useServices } from \"../hooks/useServices\";\r\nimport { fallbackBool } from \"../util/fallbackBool\";\r\nimport { Icon } from \"./Icon\";\r\n\r\n\r\nexport const Sidemenu: React.FC = () => {\r\n    const { open, setOpen } = useMenu();\r\n\r\n    return <SidemenuNo toggleMenu={(v) => setOpen(fallbackBool(v, open))} isOpen={open} />\r\n}\r\n\r\nexport const SidemenuNo: React.FC<Props> = ({ toggleMenu, isOpen }: Props) => {\r\n    const { path } = useServices();\r\n    return (\r\n        <div className={classNames({ \"side-menu-open\": isOpen })}>\r\n            <div className=\"side-menu-close\" onClick={() => toggleMenu(false)}>\r\n                <Icon times />\r\n            </div>\r\n\r\n            <div className=\"side-menu-backdrop\" onClick={() => toggleMenu(false)}></div>\r\n\r\n            <div className=\"side-menu\">\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/attestations\" onClick={() => toggleMenu(false)}>\r\n                            <Icon id-card /><span>Credentials</span>\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/contacts\" onClick={() => toggleMenu(false)}>\r\n                            <Icon users /><span>Contacts</span>\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/\" onClick={() => toggleMenu(false)} className=\"disabled\">\r\n                            <Icon info-circle /><span>About</span>\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/\" onClick={() => toggleMenu(false)} className=\"disabled\">\r\n                            <Icon cog /><span>Settings</span>\r\n                        </Link>\r\n                    </li>\r\n                    <p>Using agent: {path}</p>\r\n                </ul>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    toggleMenu: (v?: boolean) => any,\r\n    isOpen: boolean,\r\n}","\r\nexport const fallbackBool = (...bools: (boolean | undefined)[]) => bools.find(b => b === true || b === false) || false;\r\n","import classnames from \"classnames\";\r\nimport React, { ReactElement } from \"react\";\r\n\r\nexport const Button: React.FC<Props> = ({ onClick, isPending, primary, children, ...props }: Props) => (\r\n    <button  {...props} onClick={onClick} className={classnames([\"btn\", { pending: isPending, primary: primary, secondary: !primary }])}>\r\n        <span>{children}</span>\r\n        <div className=\"lds-ellipsis\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    </button>\r\n)\r\n\r\ninterface Props {\r\n    onClick?: (newVal: any) => any;\r\n    isPending?: boolean;\r\n    children?: string | ReactElement;\r\n    primary?: boolean;\r\n    disabled?: boolean;\r\n    type?: \"button\" | \"reset\" | \"submit\";\r\n}\r\n","import QRCode from \"qrcode.react\";\r\nimport React, { ReactElement } from 'react';\r\nimport CopyToClipboard from \"react-copy-to-clipboard\";\r\nimport { Icon } from \"./Icon\";\r\n\r\nexport const CredentialCard: React.FC<Props> = (p) => (\r\n\r\n    <div className=\"card-item\">\r\n        <div className=\"row\">\r\n            <div className=\"logo-box\">\r\n                <img style={{ width: \"80%\" }} src={p.imageUrl} alt=\"\" />\r\n            </div>\r\n            <div className=\"text-box\">\r\n                <div className=\"primary\">{p.title}</div>\r\n                <div className=\"secondary\">{p.issuerName}</div>\r\n            </div>\r\n            {!p.withQRs ? \"\" :\r\n                <div className=\"tool\">\r\n                    <span onClick={() => p.onDisplayQR && p.onDisplayQR(p.title)}><Icon qrcode /></span>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n        {!p.showDetails ? \"\" : (\r\n            <div className=\"credential-details\">\r\n                <div className=\"row\">\r\n                    <div className=\"text-box\">\r\n                        <div className=\"primary\">{p.title}</div>\r\n                        <div className=\"secondary\">{p.value}</div>\r\n                    </div>\r\n                    {!p.withQRs ? \"\" :\r\n                        <div className=\"tool\">\r\n                            <span onClick={() => p.onDisplayQR && p.onDisplayQR(p.title)}><Icon qrcode /></span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )}\r\n\r\n        {!p.withQRs || !p.qrValue ? \"\" : (\r\n\r\n            <div className=\"qr-code\">\r\n                <CopyToClipboard text={p.qrValue}>\r\n                    <QRCode value={p.qrValue} size={256} level={\"M\"} />\r\n                </CopyToClipboard>\r\n            </div>\r\n\r\n        )}\r\n\r\n        {!p.showMeta ? \"\" : (\r\n\r\n            <div className=\"credential-meta\">\r\n                <table>\r\n                    <tbody>\r\n                        {(p.metadata || []).map(e => (\r\n                            <tr key={e.key.toString()}>\r\n                                <td>{e.key}</td>\r\n                                <td>{e.value}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )}\r\n\r\n    </div>\r\n\r\n);\r\n\r\n\r\ninterface Props {\r\n    imageUrl: string;\r\n    title: string;\r\n    issuerName: string;\r\n    value?: string;\r\n    withQRs?: boolean;\r\n    showDetails?: boolean;\r\n    showMeta?: boolean;\r\n    qrValue?: string;\r\n    metadata?: Array<{ key: string | ReactElement, value: string | ReactElement }>;\r\n    onDisplayQR?: (qr: string) => any;\r\n}\r\n","\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMenu } from \"../hooks/useMenu\";\r\nimport { Icon } from \"./Icon\";\r\n\r\n\r\nexport const SubpageHeader: React.FC<Omit<Props, \"openMenu\">> = (p) => {\r\n    const { setOpen } = useMenu();\r\n\r\n    return <SubpageHeaderNo openMenu={() => setOpen(true)} {...p} />\r\n}\r\n\r\nexport const SubpageHeaderNo: React.FC<Props> = (p: Props) => (\r\n    <div>\r\n        <header>\r\n            <div className=\"content\">\r\n                <Link className=\"back-arrow\" to={p.backUrl}><Icon chevron-left /></Link>\r\n\r\n                <div className=\"page-title\">{p.pageTitle}</div>\r\n\r\n                <div className=\"burger-menu\" onClick={p.openMenu}>\r\n                    <Icon bars />\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"background\"></div>\r\n        </header>\r\n\r\n        <div className=\"after-header\"> </div>\r\n    </div>\r\n)\r\n\r\ninterface Props {\r\n    backUrl: string;\r\n    pageTitle: string;\r\n    openMenu: () => any;\r\n}\r\n","import React, { createContext, FC, useContext, useState } from \"react\";\r\nimport { Dict } from \"../types/Dict\";\r\n\r\n/** The context object for i18n */\r\nexport interface I18nContext {\r\n    langCode: string;\r\n    setLanguage: (lang: string) => void;\r\n    translate: KeyTranslator;\r\n    fromLanguageDict: DictionaryTranslator;\r\n}\r\n\r\nconst Context = createContext<I18nContext>({} as I18nContext);\r\n\r\n/** Provider that creates and handles state */\r\nexport const I18nContextProvider: FC<Props> = ({ children, fallbackLangs }) => {\r\n    const [langCode, setLanguage] = useState<string>(\"nl_NL\");\r\n\r\n    const context = {\r\n        langCode,\r\n        setLanguage,\r\n        translate: (id: string) => id, // Currently cannot translate\r\n        fromLanguageDict: pickFromDictionary([langCode, ...fallbackLangs]),\r\n    };\r\n\r\n    return <Context.Provider value={context}>{children}</Context.Provider>;\r\n}\r\n\r\ninterface Props {\r\n    /** \r\n     * The language that will be used if Wallet content (like attributes)\r\n     * does not have a translation for the current language.\r\n     */\r\n    fallbackLangs: string[];\r\n}\r\n\r\nexport const useInternationalization = () => {\r\n    return useContext(Context);\r\n};\r\n\r\nexport type KeyTranslator = (key: string) => string\r\nexport type DictionaryTranslator = (dict: Dict<string>) => string\r\n\r\n/**\r\n * Picks from a list of available languages the first\r\n * according to a priority, or otherwise the first of\r\n * the available languages.\r\n */\r\nfunction pickLanguage(available: string[], priority: string[]) {\r\n    const lang = priority.find(p => available.indexOf(p) >= 0)\r\n    return lang ? lang : available[0];\r\n}\r\n\r\nfunction pickFromDictionary(priority: string[]) {\r\n    return (dict: Dict<string>) => {\r\n        const availableLanguages = Object.keys(dict);\r\n        const chosenLanguage = pickLanguage(availableLanguages, priority);\r\n\r\n        return dict[chosenLanguage];\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button } from \"../components/Button\";\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { InformedVerifyRequest } from \"../types/InformedVerifyRequest\";\r\n\r\nexport const VerifieeConsentPage: React.FC<Props> = ({ request, onSubmitConsent }) => {\r\n    const { fromLanguageDict } = useInternationalization();\r\n\r\n    const [pending, setPending] = useState(false);\r\n\r\n    const handleSubmit = (consent: boolean) => {\r\n        setPending(true);\r\n        onSubmitConsent(consent);\r\n    }\r\n\r\n    const attrs = {\r\n        success: request.resolve.attributes.filter(a => a.status === \"success\").map(a => a.results[0]),\r\n        ambiguous: request.resolve.attributes.filter(a => a.status === \"ambiguous\"),\r\n        missing: request.resolve.attributes.filter(a => a.status === \"missing\"),\r\n    }\r\n\r\n    return (\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Consent to Share\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main className=\"text-center\">\r\n                <h1>Do you wish to share?</h1>\r\n                {attrs.missing.length > 0 && (\r\n                    <div>\r\n                        <p>You are missing the following attributes:</p>\r\n                        <ul>\r\n                            {attrs.missing.map(attribute =>\r\n                                <li>{attribute.request.name}</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n\r\n                {/* TODO AMBIGUOUS */}\r\n\r\n                <p>X requires the following information:</p>\r\n\r\n                {attrs.success.map(attribute =>\r\n                    <CredentialCard\r\n                        key={attribute.hash}\r\n                        title={attribute.name}\r\n                        issuerName={attribute.signer_mid_b64}\r\n                        imageUrl={\"\"}\r\n                        value={attribute.value}\r\n                        showDetails\r\n                    />\r\n                )}\r\n\r\n                <p>Do you wish to share these credentials?</p>\r\n                <Button onClick={() => handleSubmit(true)} isPending={pending} primary >Share these credentials</Button>\r\n                <Button onClick={() => handleSubmit(false)} disabled={pending} >Do not share</Button>\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    request: InformedVerifyRequest,\r\n    onSubmitConsent: (consent: boolean) => any\r\n}\r\n","import React from 'react';\r\nimport './assets/css/font-awesome.min.css';\r\nimport './assets/css/index.css';\r\nimport { VerifieeConsentPage } from \"./pages/VerifieeConsentPage\";\r\nimport { InformedVerifyRequest } from \"./types/InformedVerifyRequest\";\r\n\r\nexport const DemoPage: React.FC = () => {\r\n\r\n    const request: InformedVerifyRequest = {\r\n        request: {\r\n            attributes: [],\r\n            verifier_id: \"VRFID\",\r\n        },\r\n        resolve: {\r\n            status: \"success\",\r\n            attributes: [\r\n                {\r\n                    status: \"success\",\r\n                    ref: \"a\",\r\n                    request: { name: \"name\", format: \"id_metadata\", ref: \"a\" },\r\n                    results: [\r\n                        { hash: \"xsd\", value: \"Tim Speelman\", format: \"id_metadata\", name: \"name\", signer_mid_b64: \"xyz\", metadata: 1 }\r\n                    ],\r\n                    responses: [{ hash: \"xsd\", ref: \"a\", }],\r\n                },\r\n                {\r\n                    status: \"success\",\r\n                    ref: \"a\",\r\n                    request: { name: \"age\", format: \"id_metadata\", ref: \"a\" },\r\n                    results: [\r\n                        { hash: \"xsd\", value: \"28\", format: \"id_metadata\", name: \"age\", signer_mid_b64: \"xyz\", metadata: 1 }\r\n                    ],\r\n                    responses: [{ hash: \"xsd\", ref: \"a\", }],\r\n                }\r\n            ]\r\n        },\r\n    }\r\n    return (\r\n        <VerifieeConsentPage onSubmitConsent={() => { }} request={request} />\r\n    )\r\n}\r\n","import React, { ReactElement } from \"react\";\r\n\r\nexport const SelectInput: React.FC<Props> = (p: Props) => (\r\n    <select value={p.value} onChange={(e) => p.onChange(e.target.value)}>\r\n        {!p.emptyMessage ? \"\" : <option value={\"\"} disabled hidden>{p.emptyMessage}</option>}\r\n        {p.options.map(o => (\r\n            <option value={o.value} key={o.value}>{o.label}</option>\r\n        ))}\r\n    </select>\r\n)\r\n\r\ninterface Props {\r\n    value: any;\r\n    onChange: (newVal: any) => any;\r\n    options: Array<SelectOption>;\r\n    emptyMessage?: ReactElement | string;\r\n}\r\n\r\nexport interface SelectOption {\r\n    value: any;\r\n    label: ReactElement | string;\r\n}\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { LocalState } from \"../services/local/LocalState\";\r\nimport { IState } from \"../types/State\";\r\n\r\n/** The Context object available to consumers */\r\nexport interface LocalStateContext {\r\n    state: IState;\r\n}\r\n\r\n// Create a react context with dummy default value\r\nconst Context = createContext<LocalStateContext>({} as LocalStateContext);\r\n\r\nexport const LocalStateContextProvider: React.FC<{ localState: LocalState }> = ({ localState, children }) => {\r\n    const [state, setState] = useState<IState>(localState.state);\r\n\r\n    // Register to the changes to local state\r\n    useEffect(() => {\r\n        localState.stateChangeHook.on(setState);\r\n    }, [localState])\r\n\r\n    return <Context.Provider value={{ state }}>{children}</Context.Provider>\r\n}\r\n\r\nexport const useLocalState = () => {\r\n    return useContext(Context);\r\n};\r\n\r\n","import { Recipe } from \"@tsow/ow-ssi\";\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"../components/Button\";\r\nimport { SelectInput, SelectOption } from \"../components/SelectInput\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { useLocalState } from \"../hooks/useLocalState\";\r\nimport { Dict } from \"../types/Dict\";\r\n\r\nexport const CredentialCreatePage: React.FC<Props> = ({ onSubmitRequest }) => {\r\n\r\n    const { langCode } = useInternationalization();\r\n    const { state } = useLocalState();\r\n\r\n    const [provider, setProvider] = useState<string>(\"\");\r\n    const [procedure, setProcedure] = useState<string>(\"\");\r\n    const [provOnline] = useState<null | boolean>(true);\r\n    const [pending, setPending] = useState(false);\r\n\r\n    // Clear the chosen procedure once user changes the provider\r\n    useEffect(() => setProcedure(\"\"), [provider]);\r\n\r\n    const providers = useMemo(() => formatProviders(state.providers, langCode), [state.providers, langCode]);\r\n    const procedures = useMemo(() => formatRecipes(state.providers, provider, langCode), [state.providers, provider, langCode]);\r\n\r\n    const handleSubmit = () => {\r\n        setPending(true);\r\n        onSubmitRequest(provider, procedure);\r\n    }\r\n\r\n    return (\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Request Credential\"}\r\n                backUrl={\"/\"}\r\n            />\r\n            <main className=\"text-center\">\r\n                <h1>Request new credentials</h1>\r\n\r\n\r\n                {providers.length === 0 ? (\r\n                    <div>\r\n                        <p>You don't know any providers yet.. Please add one to your\r\n                        contacts first.</p>\r\n\r\n                        <Link to=\"/contacts\"><Button primary>Go to contacts</Button></Link>\r\n                    </div>\r\n                ) : (\r\n                        <div>\r\n                            <p>Please pick a provider and the credential you wish to obtain.</p>\r\n\r\n                            <SelectInput\r\n                                options={providers}\r\n                                value={provider}\r\n                                onChange={setProvider}\r\n                                emptyMessage={\"Select a provider please\"}\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                {!provider ? \"\" :\r\n                    <SelectInput\r\n                        options={procedures}\r\n                        value={procedure}\r\n                        onChange={setProcedure}\r\n                        emptyMessage={\"Select your attribute\"}\r\n                    />\r\n                }\r\n\r\n                <br />\r\n                <br />\r\n\r\n                {provOnline === false ? <p>This provider seems to be offline..</p> : \"\"}\r\n\r\n                {!provider || !procedure ? \"\" : <Button onClick={handleSubmit} isPending={pending} disabled={!provOnline || !provider || !procedure}>\r\n                    Request Attribute</Button>}\r\n            </main>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nfunction formatProviders(providers: Dict<Recipe.RecipeServiceDescriptor>, langCode: string): SelectOption[] {\r\n    return Object.keys(providers).map(key =>\r\n        ({\r\n            value: providers[key].id,\r\n            label: providers[key].title[langCode],\r\n        })).sort((a, b) => a.label > b.label ? -1 : 1);\r\n}\r\n\r\nfunction formatRecipes(providers: Dict<Recipe.RecipeServiceDescriptor>, provId: string, langCode: string): SelectOption[] {\r\n    const prov = providers[provId];\r\n    if (!prov) return [];\r\n    const recipes = Object.values(prov.recipes);\r\n    return recipes.map(recipe =>\r\n        ({\r\n            value: recipe.name,\r\n            label: recipe.title[langCode],\r\n        })).sort((a, b) => a.label > b.label ? -1 : 1);\r\n}\r\n\r\ninterface Props {\r\n    onSubmitRequest: (providerId: string, procedureId: string) => any;\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"../components/Button\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\n\r\nexport const ProcedureDonePage: React.FC<Props> = ({ pageTitle, messageTitle, messageBody }) => {\r\n    return (\r\n        <div className=\"subpage nav-compact\">\r\n\r\n            <SubpageHeader\r\n                pageTitle={pageTitle}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main className=\"text-center\" >\r\n                <h1>{messageTitle}</h1>\r\n                <p>{messageBody}</p>\r\n\r\n                <Link to=\"/\"><Button>OK</Button></Link>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    pageTitle: string;\r\n    messageTitle: string;\r\n    messageBody: string;\r\n}","import { IState } from \"../types/State\";\r\nimport { useLocalState } from \"./useLocalState\";\r\n\r\nlet _s: any = null;\r\n\r\nexport function useSelector<T>(selector: (state: IState) => T) {\r\n    const context = useLocalState();\r\n    if (_s !== context.state) console.log(\"useSelector: STATE updated\");\r\n    _s = context.state;\r\n    return selector(context.state);\r\n}","/**\r\n * Memoize a unary function. Caches the argument and return value of a call to\r\n * this function. When the argument is the same as in the previous call, it will\r\n * return the cached return value without invoking the function again.\r\n *\r\n * This is useful for functions that return a new object with the same contents\r\n * in each call, while we prefer to have the exact same object.\r\n */\r\nexport function memoizeUnary<I, O>(fn: (arg: I) => O, thisArg: any): (arg: I) => O {\r\n    let cachedI: I;\r\n    let cachedO: O;\r\n    return (arg: I) => {\r\n        if (cachedI !== undefined && cachedI === arg) {\r\n            return cachedO;\r\n        } else {\r\n            cachedI = arg;\r\n            cachedO = fn.apply(thisArg, [arg]);\r\n            return cachedO;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Memoize a binary function. Caches the arguments and return value of a call to\r\n * this function. When the arguments are the same as in the previous call, it will\r\n * return the cached return value without invoking the function again.\r\n *\r\n * This is useful for functions that return a new object with the same contents\r\n * in each call, while we prefer to have the exact same object.\r\n */\r\nexport function memoizeBinary<I1, I2, O>(fn: (arg1: I1, arg2: I2) => O, thisArg: any): (arg1: I1, arg2: I2) => O {\r\n    let cachedI1: I1;\r\n    let cachedI2: I2;\r\n    let cachedO: O;\r\n    return (arg1: I1, arg2: I2) => {\r\n        if (cachedI1 !== undefined && cachedI1 === arg1 &&\r\n            cachedI2 !== undefined && cachedI2 === arg2) {\r\n            return cachedO;\r\n        } else {\r\n            cachedI1 = arg1;\r\n            cachedI2 = arg2;\r\n            cachedO = fn.apply(thisArg, [arg1, arg2]);\r\n            return cachedO;\r\n        }\r\n    };\r\n}\r\n","import { Recipe } from \"@tsow/ow-ssi\";\r\nimport { IState, LocalAttribute } from \"../../types/State\";\r\nimport { memoizeUnary } from \"../../util/memoizeFn\";\r\n\r\nexport function getAttributes(state: IState): Array<LocalAttribute & WithProvider> {\r\n    return state.attributes.map(a => ({\r\n        ...a,\r\n        provider: getProviderByMid(a.signer_mid_b64)(state)!,\r\n    }));\r\n}\r\n\r\nexport function getAttributeByHash(hash: string) {\r\n    return memoizeUnary((state: IState) => {\r\n        return getAttributes(state).find(a => a.hash === hash);\r\n    }, null);\r\n}\r\n\r\nexport function getProviders(state: IState) {\r\n    return Object.values(state.providers);\r\n}\r\n\r\nexport function getProviderByMid(mid: string) {\r\n    return memoizeUnary((state: IState) => {\r\n        const result = Object.values(state.providers).find(p => p.mid_b64 === mid);\r\n        return result;\r\n    }, null);\r\n}\r\n\r\ninterface WithProvider {\r\n    provider: Recipe.RecipeServiceDescriptor\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button } from \"../components/Button\";\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { useSelector } from \"../hooks/useSelector\";\r\nimport { getProviderByMid } from \"../services/local/selectors\";\r\nimport { AttributeReceiveRequest } from \"../types/types\";\r\n\r\nexport const ReceiveAttributesPage: React.FC<Props> = ({ receiveRequest, onSubmitConsent }) => {\r\n    const { fromLanguageDict } = useInternationalization();\r\n\r\n    const provider = useSelector(getProviderByMid(receiveRequest.provider));\r\n\r\n    const [pending, setPending] = useState(false);\r\n\r\n    const attributesToReceive = receiveRequest.attributes;\r\n\r\n\r\n    const handleSubmit = (consent: boolean) => {\r\n        setPending(true);\r\n        onSubmitConsent(consent);\r\n    }\r\n\r\n    return !receiveRequest ? <div>...ReceiveAttributesPage...</div> : (\r\n        <div className=\"subpage nav-compact\">\r\n\r\n            <SubpageHeader\r\n                pageTitle={\"Receive Credentials\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main className=\"text-center\" >\r\n                <h1>Step 2: Save New Credentials</h1>\r\n                <p>{fromLanguageDict(provider!.title)} offers you the following credentials:</p>\r\n\r\n                {attributesToReceive.map(attribute => (\r\n                    <CredentialCard\r\n                        key={attribute.name}\r\n                        title={fromLanguageDict(attribute.title)}\r\n                        issuerName={fromLanguageDict(provider!.title)}\r\n                        imageUrl={provider!.logo_url}\r\n                        value={attribute.value}\r\n                        showDetails={true}\r\n                        showMeta={true}\r\n                        metadata={[\r\n                            { key: \"Signed by\", value: fromLanguageDict(provider!.title) },\r\n                            { key: \"Created at\", value: \"2018-09-01 13:20:00 CET\" },\r\n                            { key: \"Valid until\", value: \"2020-09-01 13:20:00 CET\" },\r\n                        ]} />\r\n                ))}\r\n\r\n                <p>Do you wish to save these credentials?</p>\r\n                <Button onClick={() => handleSubmit(true)} primary isPending={pending}>Save these credentials</Button>\r\n                <Button onClick={() => handleSubmit(false)} disabled={pending}>Do not save</Button>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    receiveRequest: AttributeReceiveRequest;\r\n    onSubmitConsent: (consent: boolean) => any;\r\n}","import { Recipe } from \"@tsow/ow-ssi\";\r\nimport { AttributeReceiveRequest, AttributeShareRequest } from \"../types/types\";\r\nimport { Hook } from \"../util/Hook\";\r\nimport { AttributesService } from \"./AttributeService\";\r\nimport { OpenWalletService } from \"./OpenWalletService\";\r\nimport { ProviderService } from \"./ProviderService\";\r\n\r\nexport enum Step { INIT, SHARE, RECEIVE, DONE };\r\nexport enum Status { PENDING, COMPLETE, ABORTED, FAILED };\r\n\r\nexport class RequestProcedureFlowRunner {\r\n    public step: Step = Step.INIT;\r\n    public status: Status = Status.PENDING;\r\n    public hookStep: Hook<Step> = new Hook();\r\n    public hookUserConsentToReceive: Hook<boolean> = new Hook();\r\n    public hookStatus: Hook<Status> = new Hook();\r\n\r\n    private providerKey?: string;\r\n    private procedureKey?: string;\r\n\r\n    public message: string = \"\";\r\n\r\n    constructor(\r\n        private providersService: ProviderService,\r\n        private walletService: OpenWalletService,\r\n        private attributeService: AttributesService,\r\n    ) { }\r\n\r\n    get provider(): Recipe.RecipeServiceDescriptor | null {\r\n        return this.providerKey ? this.providersService.providers[this.providerKey] : null;\r\n    }\r\n\r\n    get procedure() {\r\n        return this.provider && this.procedureKey &&\r\n            this.provider.recipes[this.procedureKey];\r\n    }\r\n\r\n    get requirements() {\r\n        return this.procedure && (this.procedure.verify_request?.attributes || [])\r\n            .map(a => a.name);\r\n    }\r\n\r\n    get shareRequest(): AttributeShareRequest | null {\r\n        if (!this.requirements) return null;\r\n        return {\r\n            attributeNames: this.requirements,\r\n            done: () => { },\r\n            id: \"\",\r\n            reason: \"Some reason\",\r\n            receiver: this.provider!.mid_b64,\r\n        }\r\n    }\r\n\r\n    public receiveRequest: AttributeReceiveRequest | null = null;\r\n\r\n    userStartsRequest(providerKey: string, procedureKey: string) {\r\n        this.providerKey = providerKey;\r\n        this.procedureKey = procedureKey;\r\n        if (this.requirements && this.requirements.length === 0) {\r\n            this.executeProcedure();\r\n        } else {\r\n            this.askUserToShare();\r\n        }\r\n    }\r\n\r\n    userConsentsToShare(consent: boolean) {\r\n        if (consent) {\r\n            this.executeProcedure();\r\n        } else {\r\n            this.abortProcedure();\r\n        }\r\n    }\r\n\r\n    userConsentsToReceive(consent: boolean) {\r\n        this.hookUserConsentToReceive.fire(consent);\r\n\r\n        if (consent) {\r\n            this.saveReceivedCredentials();\r\n        } else {\r\n            this.abortProcedure();\r\n        }\r\n    }\r\n\r\n    protected askUserToShare() {\r\n        this.setStep(Step.SHARE);\r\n    }\r\n\r\n    protected async executeProcedure() {\r\n        const { providerKey, procedureKey } = this;\r\n        if (!providerKey || !procedureKey) return;\r\n\r\n        // We pass a callback to the WalletService for asking consent to receive\r\n        const onConsent = (data: any) => {\r\n            this.askUserToReceive(data);\r\n            return new Promise<boolean>((resolve) => this.hookUserConsentToReceive.on(resolve));\r\n        }\r\n\r\n        try {\r\n            const result = await this.walletService.requestOWAttestSharingApproved(\r\n                providerKey, procedureKey, onConsent);\r\n\r\n\r\n            if (result) {\r\n                result.forEach(a => this.attributeService.storeAttribute(a));\r\n                this.showMessage('The attributes were successfully added to your identity.');\r\n                this.setStatus(Status.COMPLETE);\r\n                this.done();\r\n                return result;\r\n            } else {\r\n                this.showMessage('The attributes were not added to your identity.');\r\n                this.setStatus(Status.ABORTED);\r\n                this.done();\r\n                return [];\r\n            }\r\n\r\n        } catch (e) {\r\n            this.showMessage(\"Something went wrong\");\r\n            console.error(\"Something went wrong\", e);\r\n            this.setStatus(Status.FAILED);\r\n        }\r\n    }\r\n\r\n    protected askUserToReceive(data: any) {\r\n        console.log(\"Asking user\", data);\r\n        this.receiveRequest = {\r\n            attributes: data,\r\n            done: () => { },\r\n            id: \"\",\r\n            provider: this.provider?.mid_b64!,\r\n            reason: \"You asked for them\"\r\n        }\r\n        this.setStep(Step.RECEIVE);\r\n    }\r\n\r\n    protected saveReceivedCredentials() {\r\n        // Done in executeProcedure\r\n    }\r\n\r\n    protected done() {\r\n        this.setStep(Step.DONE);\r\n    }\r\n\r\n    protected abortProcedure() {\r\n        this.setStatus(Status.ABORTED);\r\n        this.setStep(Step.DONE);\r\n    }\r\n\r\n    protected showMessage(msg: string) {\r\n        this.message = msg;\r\n    }\r\n\r\n    protected setStep(step: Step) {\r\n        this.step = step;\r\n        this.hookStep.fire(step);\r\n    }\r\n\r\n    protected setStatus(status: Status) {\r\n        this.status = status;\r\n        this.hookStatus.fire(status);\r\n    }\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button } from \"../components/Button\";\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { useSelector } from \"../hooks/useSelector\";\r\nimport { getAttributes, getProviderByMid } from \"../services/local/selectors\";\r\nimport { AttributeShareRequest } from \"../types/types\";\r\n\r\nexport const ShareRequestPage: React.FC<Props> = ({ shareRequest, onSubmitConsent }) => {\r\n    const { fromLanguageDict } = useInternationalization();\r\n\r\n    const provider = useSelector(getProviderByMid(shareRequest.receiver));\r\n    const allAttributes = useSelector(getAttributes);\r\n    const attributesToShare = shareRequest.attributeNames.map(name => allAttributes.find(a => a.name === name)).filter(a => !!a);\r\n\r\n\r\n    const [pending, setPending] = useState(false);\r\n\r\n    const handleSubmit = (consent: boolean) => {\r\n        setPending(true);\r\n        onSubmitConsent(consent);\r\n    }\r\n\r\n    return !provider ? <div>...ShareRequestPage No Provider...</div> : (\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Request Credential\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main className=\"text-center\">\r\n                <h1>Step 1: Share Information</h1>\r\n                <p>{fromLanguageDict(provider.title)} requires the following information:</p>\r\n\r\n                {attributesToShare.map(attribute => !attribute ? \"\" :\r\n                    <CredentialCard\r\n                        key={attribute.hash}\r\n                        title={fromLanguageDict(attribute.title)}\r\n                        issuerName={fromLanguageDict(attribute.provider.title)}\r\n                        imageUrl={attribute.provider.logo_url}\r\n                        value={attribute.value}\r\n                        showDetails\r\n                    />\r\n                )}\r\n\r\n\r\n                <p>Do you wish to share these credentials?</p>\r\n                <Button onClick={() => handleSubmit(true)} isPending={pending} primary >Share these credentials</Button>\r\n                <Button onClick={() => handleSubmit(false)} disabled={pending} >Do not share</Button>\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    shareRequest: AttributeShareRequest,\r\n    onSubmitConsent: (consent: boolean) => any\r\n}\r\n","\r\ntype Listener<T> = (arg: T) => any;\r\ntype Unsubscribe = () => void;\r\n\r\nexport class Hook<T> {\r\n    private listeners: Array<Listener<T>> = [];\r\n\r\n    public fire(arg: T): void {\r\n        this.listeners.forEach((l) => l(arg));\r\n    }\r\n\r\n    public on(listener: Listener<T>): Unsubscribe {\r\n        this.listeners.push(listener);\r\n        return () => this.unsubscribe(listener);\r\n    }\r\n\r\n    /** Pipe the data to another hook */\r\n    public pipe(hook: Hook<T>): Unsubscribe {\r\n        const listener = (arg: T) => hook.fire(arg);\r\n        return this.on(listener);\r\n    }\r\n\r\n    private unsubscribe(listener: Listener<T>): void {\r\n        this.listeners = this.listeners.filter((l) => l !== listener);\r\n    }\r\n}\r\n","import { Recipe } from \"@tsow/ow-ssi\";\r\nimport Axios from \"axios\";\r\nimport { Dict } from '../types/Dict';\r\nimport { timer } from '../util/timer';\r\nimport { LocalState } from \"./local/LocalState\";\r\n\r\nexport enum OnlineStatus {\r\n    ONLINE, PENDING, OFFLINE\r\n}\r\n\r\n/**\r\n * The ProvidersService keeps track of known providers,\r\n * checks them for updates and allows us to add new ones\r\n * by providing a URL.\r\n */\r\nexport class ProviderService {\r\n\r\n    private online: Dict<OnlineStatus> = {};\r\n\r\n    constructor(\r\n        private state: LocalState) { }\r\n\r\n    get providers() {\r\n        return this.state.providers;\r\n    }\r\n\r\n    public checkIsOnline(id: string) {\r\n        if (!(id in this.online)) {\r\n            this.pingForOnline(id);\r\n            return false;\r\n        }\r\n        return this.online[id] === OnlineStatus.ONLINE;\r\n    }\r\n\r\n    public pingForOnline(id: string) {\r\n        this.online[id] = OnlineStatus.PENDING;\r\n        return Promise.race([\r\n            this.getByURL(this.state.providers[id].url).then(() => true).catch(() => false),\r\n            timer(1000).then(() => false),\r\n        ]).then(isOnline => {\r\n            this.online[id] = isOnline ? OnlineStatus.ONLINE : OnlineStatus.OFFLINE;\r\n        });\r\n    }\r\n\r\n    public getByURL(url: string) {\r\n        return Axios.get(url).then(r => r.data);\r\n    }\r\n\r\n    public addByURL(url: string) {\r\n        return this.getByURL(url)\r\n            .then((details) => { this.addOrUpdate(details); return details; });\r\n    }\r\n\r\n    protected addOrUpdate(details: Recipe.RecipeServiceDescriptor) {\r\n        const s = this.state;\r\n        return this.state.store({\r\n            providers: {\r\n                ...s.providers,\r\n                [details.id]: details,\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { LocalAttribute } from \"../types/State\";\r\nimport { LocalState } from \"./local/LocalState\";\r\n\r\nexport class AttributesService {\r\n\r\n    constructor(private state: LocalState) { }\r\n\r\n    get attributes() {\r\n        return this.state.attributes;\r\n    }\r\n\r\n    public storeAttribute(attr: LocalAttribute) {\r\n        const s = this.state;\r\n        this.state.store({\r\n            attributes: [...s.attributes, attr],\r\n        });\r\n    }\r\n\r\n}\r\n","import { AxiosInstance } from \"axios\";\r\nimport { IState } from \"../../types/State\";\r\n\r\n/**\r\n * Gateway to talk to the localhost\r\n */\r\nexport class LocalAPI {\r\n\r\n    constructor(private axios: AxiosInstance) { }\r\n\r\n    getState(): Promise<IState> {\r\n        return Promise.resolve(JSON.parse(localStorage.getItem(\"state\") || \"{}\"));\r\n    }\r\n\r\n    putState(state: IState) {\r\n        return Promise.resolve(localStorage.setItem(\"state\", JSON.stringify(state)));\r\n    }\r\n\r\n}\r\n","import { IState } from \"../../types/State\";\r\nimport { Hook } from \"../../util/Hook\";\r\nimport { LocalAPI } from \"./LocalAPI\";\r\n\r\n/**\r\n * The LocalState is simply stored in a JSON file by the\r\n * OpenWallet Python service running on localhost. This\r\n * differs from the state stored by the IPv8 service.\r\n * \r\n * This class keeps a copy in memory and synchronises with\r\n * the python service.\r\n */\r\nexport class LocalState {\r\n\r\n    public stateChangeHook: Hook<IState> = new Hook();\r\n\r\n    private _state: IState = {\r\n        attributes: [],\r\n        providers: {},\r\n    };\r\n\r\n    get state() {\r\n        return this._state;\r\n    }\r\n\r\n    get attributes() {\r\n        return this._state.attributes;\r\n    }\r\n\r\n    get providers() {\r\n        return this._state.providers;\r\n    }\r\n\r\n    constructor(private localApi: LocalAPI) {\r\n\r\n        this.fetch();\r\n    }\r\n\r\n    fetch() {\r\n        return this.localApi.getState()\r\n            .then(response => this.updateState(response));\r\n    }\r\n\r\n    store(state: Partial<IState>) {\r\n        this.updateState(state);\r\n        return this.localApi.putState(this.state);\r\n    }\r\n\r\n    protected updateState(newState: Partial<IState>) {\r\n        this._state = { ...this.state, ...newState };\r\n        console.log(\"UPDATED LOCAL STATE\", this._state);\r\n        this.stateChangeHook.fire(this.state);\r\n    }\r\n\r\n}\r\n","import { IPv8, OpenWallet, Recipe } from \"@tsow/ow-ssi\";\r\nimport Axios from \"axios\";\r\nimport { Dict } from \"../types/Dict\";\r\nimport { LocalAttribute } from \"../types/State\";\r\nimport { LocalState } from \"./local/LocalState\";\r\nimport { ProviderService } from './ProviderService';\r\n\r\nexport class OpenWalletService {\r\n\r\n    constructor(\r\n        private providersService: ProviderService,\r\n        private localState: LocalState,\r\n        private ipv8: IPv8.IPv8Service,\r\n        private recipeClient: Recipe.RecipeClient) {\r\n\r\n    }\r\n\r\n    /**\r\n     * The Agent will request attributes according to a Procedure specified\r\n     * by a Provider. The End User has approved sharing of the required data\r\n     * if any. \r\n     * \r\n     * @param providerId \r\n     * @param procedureId \r\n     * @param onConsentStore \r\n     */\r\n    async requestOWAttestSharingApproved(\r\n        providerId: string,\r\n        procedureId: string,\r\n        onConsentStore: (data: OfferedAttribute[]) => Promise<boolean>\r\n    ): Promise<LocalAttribute[]> {\r\n\r\n        const provider = this.providersService.providers[providerId];\r\n        const recipe = provider.recipes[procedureId];\r\n        const requirements = (recipe.verify_request?.attributes || []).map(a => a.name);\r\n\r\n        // Resolution TODO update\r\n        const dataToShare: Dict<string> = this.localState.attributes\r\n            .filter((a) => requirements.indexOf(a.name) >= 0)\r\n            .reduce((c, a) => ({ ...c, [a.name]: a.value }), {});\r\n\r\n        let vResp: OpenWallet.OWVerifyResponse;\r\n\r\n        const process = this.recipeClient.createProcess(recipe);\r\n\r\n        const myAtts = await this.ipv8.api.listAttestations();\r\n\r\n        if (recipe.verify_request) {\r\n            vResp = {\r\n                attributes: recipe.verify_request?.attributes.map((a, i) => ({\r\n                    hash: myAtts.find(x => x.attribute_name === a.name)?.attribute_hash || \"\",\r\n                    ref: a.name,\r\n                    value: dataToShare[a.name],\r\n                })),\r\n                request_hash: \"\",\r\n                // @ts-ignore\r\n                subject_id: this.recipeClient.myId, // FIXME\r\n            }\r\n            process.allowVerification(vResp);\r\n        }\r\n\r\n        const recipeRequest = process.createRequest(vResp!);\r\n\r\n        const httpResponse = await Axios.post(recipe.service_endpoint, { request: recipeRequest });\r\n        const offer: OpenWallet.OWAttestOffer = httpResponse.data.offer;\r\n\r\n        const data = offer.attributes.map(a => ({\r\n            name: a.name,\r\n            value: a.value,\r\n            title: recipe.attributes.find(x => x.name === a.name)?.title || {},\r\n            signer_mid_b64: offer.attester_id,\r\n        }))\r\n\r\n        if (!process.validateOffer(offer)) {\r\n            console.warn(\"Server offer did not pass validation\");\r\n            return [];\r\n        }\r\n\r\n        const consent = await onConsentStore(data);\r\n\r\n        if (!consent) {\r\n            return [];\r\n        }\r\n\r\n        const attributes = await process.requestAttestation(offer);\r\n\r\n        console.log('Received result', attributes);\r\n\r\n        if (!attributes) {\r\n            return [];\r\n        }\r\n\r\n        return attributes.map((attr): LocalAttribute => {\r\n            const attrDesc = recipe.attributes.find((a: any) => a.name === attr.name);\r\n\r\n            if (attr && attrDesc) {\r\n                return {\r\n                    name: attr.name,\r\n                    value: attr.value,\r\n                    hash: attr.hash,\r\n                    time: Date.now(), // FIXME should come from client\r\n                    provider_title: provider.title,\r\n                    title: attrDesc.title,\r\n                    type: attrDesc.format,\r\n                    metadata: attr.metadata,\r\n                    signer_mid_b64: attr.signer_mid_b64,\r\n                };\r\n            } else {\r\n                throw new Error(\"Attestation or procedure not found\"); // FIXME\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport interface OfferedAttribute {\r\n    name: string;\r\n    value: string;\r\n    title: Dict<string>;\r\n    signer_mid_b64: string;\r\n}\r\n","\r\nexport function timer(timeInMillis: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, timeInMillis));\r\n}\r\n","import { Hook } from \"./Hook\";\r\n\r\nexport class Interval {\r\n\r\n    private hook: Hook<number> = new Hook();\r\n    private index = 0;\r\n    private intervalHandle: any = null;\r\n\r\n    listen(handler: (index: number) => any) {\r\n        this.hook.on(handler);\r\n    }\r\n\r\n    start(ms: number) {\r\n        this.intervalHandle = setInterval(() => this.hook.fire(this.index++), ms);\r\n    }\r\n\r\n    stop() {\r\n        clearInterval(this.intervalHandle);\r\n    }\r\n}\r\n","/**\r\n * Communication between Wallets may occur through QR encoded messages. As the \r\n * space of QR is limited, we'll employ a callback-like system.\r\n * \r\n * 1. Our agent registers a callback function and receives a reference in turn.\r\n * 2. Via QR (or another channel) our agent sends its `member id` and the reference.\r\n * 3. The receiving agent calls our callback-resolver endpoint with the reference.\r\n * 4. Our resolver then invokes the registered callback with the id of the other agent.\r\n * \r\n * We want to limit the availability of these callbacks, so they expire after a\r\n * certain time. However, due to the round trip latency, we need a delay between\r\n * updating our reference and deprecating it. In other words, we need two or more\r\n * references to resolve to the same callback.\r\n */\r\nimport uuid from \"uuid/v4\";\r\nimport { Hook } from \"../util/Hook\";\r\nimport { Interval } from \"../util/Interval\";\r\n\r\n/**\r\n * A pointer to some value maintained by a Reference Service\r\n */\r\nexport interface Reference { id: string; }\r\n\r\n/**\r\n * With a Reference Service we can 'register' certain values and obtain a \r\n * ReferenceHandle for that value. The ReferenceHandle then generates new\r\n * References at a given interval, which expire after a given time. \r\n * \r\n * The Service then allows us to resolve a Reference to the registered value,\r\n * so long as it is not expired.\r\n * \r\n * We use this, for example, for communicating references to callbacks with\r\n * other Peers via QR or other one-way channels. As the other Peer calls us\r\n * with such a reference, this service may resolve that to the original \r\n * callback function that was registered with it, and execute the corresponding\r\n * logic.\r\n */\r\nexport interface IReferenceService<T> {\r\n\r\n    /** Register a value, receiving an idle Reference Handle */\r\n    register(value: T, options?: Partial<ReferenceOptions>): IReferenceHandle<T>\r\n\r\n    /** Resolve a Reference to a value, if it is still valid */\r\n    resolveReference(ref: Reference): IReferenceHandle<T> | undefined\r\n}\r\n\r\n/**\r\n * The Reference Handle contains the pointer to the registered value and \r\n * allows us to control and subscribe to its Reference-generation behaviour.\r\n */\r\nexport interface IReferenceHandle<T> {\r\n\r\n    /** The registered value */\r\n    value: T\r\n\r\n    /** The references that are currently alive */\r\n    references: Reference[]\r\n\r\n    /** Subscribe to the event of a new Reference being generated */\r\n    onNewReference(handler: (ref: Reference) => any): void\r\n\r\n    /** Subscribe to the event of a Reference expiring (or otherwise invalidating) */\r\n    onInvalidate(handler: (ref: Reference) => any): void\r\n\r\n    /** Subscribe to the event of this handle being destroyed */\r\n    onDestroy(handler: () => any): void\r\n\r\n    /** Start generating new References */\r\n    refreshAtInterval(millis: number): void\r\n\r\n    /** Stop generating new References */\r\n    stopRefreshing(): void\r\n\r\n    /** Invalidates all References and stops refreshing */\r\n    destroy(): void\r\n\r\n}\r\n\r\nexport class ReferenceService<T> implements IReferenceService<T> {\r\n\r\n    private handles: IReferenceHandle<T>[] = [];\r\n\r\n    constructor(private options: ReferenceOptions) { }\r\n\r\n    register(value: T, options: Partial<ReferenceOptions> = {}): IReferenceHandle<T> {\r\n        const handle = new ReferenceHandle(value, { ...this.options, ...options });\r\n        this.handles.push(handle);\r\n        handle.onDestroy(() => this.removeHandle(handle));\r\n        return handle;\r\n    }\r\n\r\n    resolveReference(ref: Reference) {\r\n        return this.handles.find(h => h.references.find(r => r.id === ref.id));\r\n    }\r\n\r\n    protected removeHandle(handle: IReferenceHandle<T>) {\r\n        this.handles = this.handles.filter(h => h !== handle);\r\n    }\r\n\r\n}\r\n\r\nclass ReferenceHandle<T> implements IReferenceHandle<T> {\r\n\r\n    public references: Reference[] = [];\r\n\r\n    private freshRefHook: Hook<Reference> = new Hook();\r\n    private invalidationHook: Hook<Reference> = new Hook();\r\n    private destroyHook: Hook<void> = new Hook();\r\n\r\n    private interval: Interval = new Interval();\r\n\r\n    constructor(\r\n        readonly value: T,\r\n        private options: ReferenceOptions,\r\n    ) {\r\n        this.interval.listen(() => this.createNewReference());\r\n    }\r\n\r\n    onNewReference(handler: (ref: Reference) => any) {\r\n        return this.freshRefHook.on(handler);\r\n    }\r\n\r\n    onInvalidate(handler: (ref: Reference) => any) {\r\n        return this.invalidationHook.on(handler);\r\n    }\r\n\r\n    onDestroy(handler: () => any) {\r\n        return this.destroyHook.on(handler);\r\n    }\r\n\r\n    refreshAtInterval(millis: number) {\r\n        this.createNewReference();\r\n        this.interval.start(millis);\r\n    }\r\n\r\n    stopRefreshing() {\r\n        this.interval.stop();\r\n    }\r\n\r\n    destroy() {\r\n        this.stopRefreshing();\r\n        this.references.forEach(r => this.expireReference(r));\r\n\r\n        this.destroyHook.fire();\r\n    }\r\n\r\n    protected createNewReference() {\r\n        const ref = { id: uuid() };\r\n\r\n        this.references.push(ref);\r\n\r\n        setTimeout(() => this.expireReference(ref), this.options.millisToExpire);\r\n\r\n        this.freshRefHook.fire(ref);\r\n    }\r\n\r\n    protected expireReference(ref: Reference) {\r\n        if (this.references.find(r => r === ref)) {\r\n            this.references = this.references.filter(r => r !== ref);\r\n\r\n            this.invalidationHook.fire(ref);\r\n\r\n            if (this.options.destroyWhenNoReferences && this.references.length === 0) {\r\n                this.destroy();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport interface ReferenceOptions {\r\n    millisToExpire: number;\r\n    destroyWhenNoReferences: boolean;\r\n}\r\n","import { IPv8, OpenWallet, Recipe } from \"@tsow/ow-ssi\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { ServiceList } from \"../hooks/useServices\";\r\nimport { Dict } from \"../types/Dict\";\r\nimport { AttributeShareRequest } from \"../types/types\";\r\nimport { AttributesService } from \"./AttributeService\";\r\nimport { LocalAPI } from \"./local/LocalAPI\";\r\nimport { LocalState } from \"./local/LocalState\";\r\nimport { OpenWalletService } from \"./OpenWalletService\";\r\nimport { ProviderService } from \"./ProviderService\";\r\nimport { ReferenceService } from \"./ReferenceService\";\r\n\r\n\r\nconst portFromUrl = window.location.hash.match(/port=([0-9]+)/);\r\n\r\nconst cookie = new Cookies();\r\nconst port = (portFromUrl ? portFromUrl[1] : null) || cookie.get(\"port\") || \"8124\";\r\ncookie.set(\"port\", port);\r\n\r\nexport const localhostBase = `http://localhost:${port}`;\r\n\r\nconst localhost = axios.create({\r\n    baseURL: localhostBase + '/api',\r\n});\r\n\r\nexport const localAPI = new LocalAPI(localhost);\r\nexport const localState = new LocalState(localAPI);\r\n\r\nexport const attributeService = new AttributesService(localState);\r\n\r\nexport const ipv8Service = new IPv8.IPv8Service(localhostBase, 1000);\r\nipv8Service.start();\r\n\r\nexport const callbackService = new ReferenceService<PeerCallback>({ destroyWhenNoReferences: true, millisToExpire: 20000 });\r\nexport type PeerCallback = (memberId: string) => any;\r\n\r\n// @ts-ignore\r\nwindow.peercalls = (memberId: string, refId: string) => {\r\n    const handle = callbackService.resolveReference({ id: refId });\r\n    if (handle) {\r\n        console.log(`Peer '${memberId}' called. Handle found!`);\r\n        handle.value(memberId);\r\n    } else {\r\n        console.log(`Peer '${memberId}' called. Could not find handle..`);\r\n    }\r\n}\r\n\r\nexport let providersService: ProviderService | null = null;\r\nexport let owService: OpenWalletService | null = null;\r\n\r\nexport const initServices = () => ipv8Service.api.getMyId().then((mid): ServiceList => {\r\n    console.log(\"TCL: mid\", mid)\r\n\r\n    providersService = new ProviderService(localState);\r\n    const owVerifiee = new OpenWallet.OWVerifiee(ipv8Service.verifieeService);\r\n    const owAttestee = new OpenWallet.OWAttestee(ipv8Service.attesteeService);\r\n    const recipeClient = new Recipe.RecipeClient(mid, owVerifiee, owAttestee);\r\n    owService = new OpenWalletService(\r\n        providersService,\r\n        localState,\r\n        ipv8Service,\r\n        recipeClient,\r\n    );\r\n\r\n    return {\r\n        localAPI,\r\n        localState,\r\n        ipv8Service,\r\n        attributeService,\r\n        callbackService,\r\n        providersService,\r\n        owService,\r\n    }\r\n});\r\n\r\nexport const reqs: Dict<AttributeShareRequest> = {};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CredentialCreatePage } from \"../pages/CredentialCreatePage\";\r\nimport { ProcedureDonePage } from \"../pages/ProcedureDonePage\";\r\nimport { ReceiveAttributesPage } from \"../pages/ReceiveAttributesPage\";\r\nimport { ShareRequestPage } from \"../pages/ShareRequestPage\";\r\nimport { RequestProcedureFlowRunner, Status } from \"../services/RequestProcedureFlowRunner\";\r\nimport { attributeService, owService, providersService } from \"../services/services\";\r\n\r\nenum Step { INIT, SHARE, RECEIVE, DONE };\r\n\r\nlet flow: RequestProcedureFlowRunner;\r\nexport const CredentialCreateFlow: React.FC = () => {\r\n\r\n    const [step, setStep] = useState<Step>(Step.INIT);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            flow = new RequestProcedureFlowRunner(providersService!, owService!, attributeService);\r\n            flow.hookStep.on(step => { console.log(step); setStep(step) });\r\n\r\n        }, 2000);\r\n    }, [])\r\n\r\n    switch (step) {\r\n        case Step.INIT: return <CredentialCreatePage onSubmitRequest={(pv, pc) => flow.userStartsRequest(pv, pc)} />;\r\n        case Step.SHARE: return <ShareRequestPage shareRequest={flow.shareRequest!} onSubmitConsent={(consent) => flow.userConsentsToShare(consent)} />\r\n        case Step.RECEIVE: return <ReceiveAttributesPage receiveRequest={flow.receiveRequest!} onSubmitConsent={(consent) => flow.userConsentsToReceive(consent)} />\r\n        case Step.DONE: return <ProcedureDonePage messageBody={flow.message} messageTitle={flow.status === Status.COMPLETE ? \"Success\" : \"No success\"} pageTitle={\"Create\"} />\r\n        default: return <div>This should not happen</div>;\r\n    }\r\n}\r\n\r\n","import { IPv8 } from \"@tsow/ow-ssi\";\r\nimport { Hook } from \"../util/Hook\";\r\nimport { OpenWalletService } from \"./OpenWalletService\";\r\nimport { VerificationOffer } from \"./QRService\";\r\n\r\nexport enum Step { INIT, CONFIRM, DONE };\r\nexport enum Status { PENDING, COMPLETE, ABORTED, FAILED };\r\n\r\nexport class CredentialVerifyFlowRunner {\r\n    public step: Step = Step.INIT;\r\n    public status: Status = Status.PENDING;\r\n    public hookStep: Hook<Step> = new Hook();\r\n    // public hookUserConsentToVerify: Hook<boolean> = new Hook();\r\n    public hookStatus: Hook<Status> = new Hook();\r\n    public offer: VerificationOffer | undefined;\r\n\r\n    public message: string = \"\";\r\n\r\n    constructor(\r\n        private walletService: OpenWalletService,\r\n        private verifierService: IPv8.VerifierService,\r\n    ) { }\r\n\r\n    userStartsRequest(verifyOffer: VerificationOffer) {\r\n        this.offer = verifyOffer;\r\n        this.setStep(Step.CONFIRM);\r\n    }\r\n\r\n    userConsentsToVerify(consent: boolean) {\r\n        if (consent) {\r\n            this.executeProcedure();\r\n        } else {\r\n            this.abortProcedure();\r\n        }\r\n    }\r\n\r\n    protected async executeProcedure() {\r\n        // setTimeout(() => this.showVerificationResult(), 1000);\r\n        this.verifierService.verify(\r\n            this.offer!.mid,\r\n            [{\r\n                attribute_hash: this.offer!.attribute_hash,\r\n                attribute_value: this.offer!.attribute_value,\r\n                attribute_name: this.offer!.attribute_name,\r\n            }],\r\n            // { maxAgeInSeconds: 3600 * 24 * 365 }\r\n        ).then((result) => {\r\n            this.showVerificationResult(result);\r\n        })\r\n    }\r\n\r\n    protected showVerificationResult(result: boolean) {\r\n        this.showMessage(\"The result was: \" + (result ? \"verified!\" : \"unverified..\"));\r\n        this.done();\r\n    }\r\n\r\n    protected done() {\r\n        this.setStep(Step.DONE);\r\n    }\r\n\r\n    protected abortProcedure() {\r\n        this.showMessage(\"We have not verified the credential.\");\r\n        this.setStatus(Status.ABORTED);\r\n        this.setStep(Step.DONE);\r\n    }\r\n\r\n    protected showMessage(msg: string) {\r\n        this.message = msg;\r\n    }\r\n\r\n    protected setStep(step: Step) {\r\n        this.step = step;\r\n        this.hookStep.fire(step);\r\n    }\r\n\r\n    protected setStatus(status: Status) {\r\n        this.status = status;\r\n        this.hookStatus.fire(status);\r\n    }\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button } from \"../components/Button\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { VerificationOffer } from \"../services/QRService\";\r\n\r\nexport const VerifierConsentPage: React.FC<Props> = ({ verificationOffer, onSubmitConsent }) => {\r\n    const [pending, setPending] = useState(false);\r\n\r\n    const handleSubmit = (consent: boolean) => {\r\n        setPending(true);\r\n        onSubmitConsent(consent);\r\n    }\r\n\r\n    return (\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Verify a Credential\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main className=\"text-center\">\r\n                <h1>Verifying by QR</h1>\r\n                <p>Do you wish to verify the following?</p>\r\n\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Member ID</td>\r\n                            <td>{verificationOffer.mid}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attribute Name</td>\r\n                            <td>{verificationOffer.attribute_name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attribute Hash</td>\r\n                            <td>{verificationOffer.attribute_hash}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attribute Value</td>\r\n                            <td>{verificationOffer.attribute_value}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <Button onClick={() => handleSubmit(true)} isPending={pending} primary >Verify</Button>\r\n                <Button onClick={() => handleSubmit(false)} disabled={pending} >Cancel</Button>\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    verificationOffer: VerificationOffer,\r\n    onSubmitConsent: (consent: boolean) => any\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useServices } from \"../hooks/useServices\";\r\nimport { ProcedureDonePage } from \"../pages/ProcedureDonePage\";\r\nimport { VerifierConsentPage } from \"../pages/VerifierConsentPage\";\r\nimport { CredentialVerifyFlowRunner } from \"../services/CredentialVerifyFlowRunner\";\r\nimport { VerificationOffer } from \"../services/QRService\";\r\n\r\nenum Step { INIT, CONFIRM, DONE };\r\n\r\nlet flow: CredentialVerifyFlowRunner;\r\nexport const CredentialVerifyFlow: React.FC<Props> = ({ verifyOffer }) => {\r\n\r\n    const [step, setStep] = useState<Step>(Step.INIT);\r\n    const { services } = useServices();\r\n\r\n    useEffect(() => {\r\n        flow = new CredentialVerifyFlowRunner(services!.owService, services!.ipv8Service.verifierService);\r\n        flow.hookStep.on(step => { console.log(step); setStep(step) });\r\n        flow.userStartsRequest(verifyOffer)\r\n    }, []);\r\n\r\n    const handleConfirm = (consent: boolean) => flow.userConsentsToVerify(consent);\r\n\r\n    switch (step) {\r\n        case Step.INIT: return <div></div>;\r\n        case Step.CONFIRM: return <VerifierConsentPage onSubmitConsent={handleConfirm} verificationOffer={flow.offer!} />;\r\n        case Step.DONE: return <ProcedureDonePage pageTitle={\"Verify a Credential\"} messageTitle={\"Verification Result\"} messageBody={flow.message} />;\r\n        default: return <div>This should not happen</div>;\r\n    }\r\n\r\n}\r\n\r\nexport interface Props {\r\n    verifyOffer: VerificationOffer;\r\n}\r\n\r\n","\r\n/** Decodes from the In-type to the Out-type */\r\nexport interface Decodes<In, Out, Err> {\r\n    decode(obj: In): DecodeResult<Out, Err>;\r\n}\r\n\r\n/** Encodes from the In-type to the Out-type */\r\nexport interface Encodes<In, Out> {\r\n    encode(obj: In): Out;\r\n}\r\n\r\n/** Informative decoding result */\r\nexport type DecodeResult<T, Err> = SuccessfulDecode<T> | DecodeFailure<Err> | DecodeUnmatched\r\n\r\nexport interface SuccessfulDecode<T> {\r\n    status: DecodeStatus.Succeeded,\r\n    result: T\r\n}\r\n\r\nexport interface DecodeUnmatched {\r\n    status: DecodeStatus.Unmatched,\r\n}\r\n\r\nexport interface DecodeFailure<Err> {\r\n    status: DecodeStatus.Failed,\r\n    error: Err,\r\n}\r\n\r\nexport enum DecodeStatus {\r\n    Succeeded = \"Succeeded\",\r\n    Failed = \"Failed\",\r\n    Unmatched = \"Unmatched\",\r\n}\r\n\r\n/**\r\n * A MultiDecoder simply finds the first decoder that can decode\r\n * the incoming object, similar to the \"Chain of Responsibility\"\r\n * design pattern.\r\n */\r\nexport class MultiDecoder<In, Out, Err> implements Decodes<In, Out, Err> {\r\n    constructor(private decoders: Decodes<In, Out, Err>[]) { }\r\n\r\n    /**\r\n     * Finds the first codec that is able to decode the QR,\r\n     * and return the decoded result\r\n     */\r\n    decode(obj: In): DecodeResult<Out, Err> {\r\n        for (let codec of this.decoders) {\r\n            const result = codec.decode(obj);\r\n            if (result.status === DecodeStatus.Succeeded) {\r\n                return result;\r\n            } else if (result.status === DecodeStatus.Failed) {\r\n                return result;\r\n            }\r\n        }\r\n        return { status: DecodeStatus.Unmatched }\r\n    }\r\n}\r\n\r\n/**\r\n * Chain two decoders (A-to-B + B-to-C) together, creating a\r\n * single decoder A-to-C.\r\n */\r\nexport class DecoderChain<A, B, C, Err> implements Decodes<A, C, Err> {\r\n\r\n    constructor(\r\n        private decodeA: Decodes<A, B, Err>,\r\n        private decodeB: Decodes<B, C, Err>) { }\r\n\r\n    decode(a: A): DecodeResult<C, Err> {\r\n        const result = this.decodeA.decode(a);\r\n\r\n        if (result.status === DecodeStatus.Succeeded) {\r\n            return this.decodeB.decode(result.result);\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Button } from \"../components/Button\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\n\r\nexport class ConfirmContactPage extends React.Component<{}, State> {\r\n\r\n    render() {\r\n        const request: any = { provider: { title: {}, description: {} } };\r\n        const lang = \"\";\r\n        const loading = false;\r\n\r\n        return (\r\n            <div className=\"subpage nav-compact\">\r\n\r\n                <SubpageHeader\r\n                    pageTitle={\"Add Contact (QR)\"}\r\n                    backUrl={\"/contacts\"}\r\n                />\r\n\r\n                <main>\r\n                    <p>Do you trust the following organization?</p>\r\n\r\n                    <img src=\"{ request.provider.logo_url }\" style={{ width: \"20% \" }} alt=\"\" />\r\n                    <h1>{request.provider.title[lang]}</h1>\r\n                    <p>{request.provider.description[lang]}</p>\r\n                    <table>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <td>{request.provider.mid_b64}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Website</th>\r\n                            <td>{request.provider.website}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Attestation Server URL</th>\r\n                            <td>{request.provider.url}</td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <Button primary onClick={() => this.confirmRequest()} disabled={loading}>Trust and add to contacts</Button>\r\n                    <Button onClick={() => this.denyRequest()} disabled={loading}>Cancel</Button>\r\n\r\n\r\n                </main>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    confirmRequest() {\r\n\r\n    }\r\n\r\n    denyRequest() {\r\n\r\n    }\r\n}\r\n\r\ninterface State {\r\n\r\n}","import React from 'react';\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\n\r\nexport class ConfirmIncomingVerificationPage extends React.Component<{}, State> {\r\n\r\n    render() {\r\n        const request: any = { provider: { title: {}, description: {} } };\r\n        const loading = false;\r\n\r\n        return (\r\n            <div className=\"subpage nav-compact\">\r\n                <SubpageHeader\r\n                    pageTitle={\"Verification Request\"}\r\n                    backUrl={\"/\"}\r\n                />\r\n\r\n                <main className=\"text-center\" >\r\n                    <h1>Someone wishes to verify</h1>\r\n                    <p>\r\n                        {request.mid} wishes to verify your information:\r\n                </p>\r\n                    <CredentialCard\r\n                        title={\"Age\"}\r\n                        issuerName={\"Staat der Nederlanden\"}\r\n                        imageUrl={\"\"}\r\n                        value={\"28\"}\r\n                        showDetails={true}\r\n                    />\r\n\r\n                    <p>Do you wish to share these credentials?</p>\r\n                    <button className=\"btn primary\" onClick={() => this.confirmRequest()} disabled={loading}>Share and continue</button>\r\n                    <button className=\"btn secondary\" onClick={() => this.denyRequest()} disabled={loading}>Cancel</button>\r\n                </main>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    confirmRequest() {\r\n\r\n    }\r\n\r\n    denyRequest() {\r\n\r\n    }\r\n}\r\n\r\ninterface State {\r\n\r\n}","import React from 'react';\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { useSelector } from \"../hooks/useSelector\";\r\nimport { getProviderByMid } from \"../services/local/selectors\";\r\n\r\nexport const ContactDetailPage: React.FC<Props> = ({ providerMid }) => {\r\n\r\n    const { fromLanguageDict } = useInternationalization();\r\n\r\n    const provider = useSelector(getProviderByMid(providerMid));\r\n\r\n    return !provider ? <div>Oops! Provider not found</div> : (\r\n\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Contact\"}\r\n                backUrl={\"/contacts\"}\r\n            />\r\n\r\n            <main>\r\n                <img src={provider.logo_url} alt={fromLanguageDict(provider.title)} />\r\n                <h1>{fromLanguageDict(provider.title)}</h1>\r\n                <p>{fromLanguageDict(provider.description)}</p>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <td>{provider.mid_b64}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Website</th>\r\n                            <td>{provider.website}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Attestation Server URL</th>\r\n                            <td><a href={provider.url + \"/about\"}>{provider.url}</a></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <h2>Credentials</h2>\r\n                <p>{fromLanguageDict(provider.title)} offers the following credentials:</p>\r\n\r\n                {Object.values(provider.recipes).map(recipe => (\r\n                    <CredentialCard\r\n                        imageUrl={provider.logo_url}\r\n                        title={fromLanguageDict(recipe.title)}\r\n                        issuerName={fromLanguageDict(provider.title)}\r\n                        key={recipe.name}\r\n                    />\r\n                ))}\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    providerMid: string;\r\n}","import React from 'react';\r\nimport { Icon } from \"./Icon\";\r\n\r\nexport const ContactCard: React.FC<Props> = (p) => (\r\n\r\n    <div className=\"card-item\">\r\n        <div className=\"row\">\r\n            <div className=\"logo-box\">\r\n                <img src={p.logoUrl} alt=\"\" />\r\n            </div>\r\n            <div className=\"text-box\">\r\n                <div className=\"primary\">{p.title}</div>\r\n            </div>\r\n            <div className=\"tool\">\r\n                <div className=\"clickable\">\r\n                    <Icon info-circle />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n);\r\n\r\n\r\ninterface Props {\r\n    logoUrl: string;\r\n    title: string;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"../components/Button\";\r\nimport { ContactCard } from \"../components/ContactCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { useSelector } from \"../hooks/useSelector\";\r\nimport { useServices } from \"../hooks/useServices\";\r\nimport { getProviders } from \"../services/local/selectors\";\r\n\r\nexport const ContactIndexPage: React.FC = () => {\r\n\r\n    const { fromLanguageDict } = useInternationalization();\r\n    const { services } = useServices();\r\n\r\n    const providers = useSelector(getProviders);\r\n\r\n    const peopleCount = 0;\r\n\r\n    const defaultContactUrl = \"http://localhost\"\r\n    const [contactUrl, setContactUrl] = useState(defaultContactUrl);\r\n    const [pending, setPending] = useState(false);\r\n    const saveContact = (url: string) => {\r\n        setPending(true);\r\n        services!.providersService?.addByURL(url).then(() => {\r\n            setContactUrl(defaultContactUrl);\r\n        }).catch((e) => {\r\n            alert(\"Failed to add that provider\");\r\n        }).finally(() => setPending(false));\r\n    }\r\n\r\n    return (\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Contacts\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main>\r\n                <h1>People ({peopleCount})</h1>\r\n                <small>No people yet..</small>\r\n\r\n                <h1>Organisations ({providers.length})</h1>\r\n                {providers.map(provider => (\r\n                    <Link to={`/contacts/${encodeURIComponent(provider.mid_b64)}`} key={provider.mid_b64}>\r\n                        <ContactCard\r\n                            logoUrl={provider.logo_url}\r\n                            title={fromLanguageDict(provider.title)}\r\n                        />\r\n                    </Link>\r\n                ))}\r\n\r\n                <h1>Add By URL</h1>\r\n                <form onSubmit={() => saveContact(contactUrl)}>\r\n                    <div className=\"col-xs-12\">\r\n                        <input type=\"url\" className=\"text-input\" placeholder=\"Enter the URL of the provider\"\r\n                            required value={contactUrl} onChange={(e) => setContactUrl(e.target.value)} />\r\n                        <br />\r\n                        <br />\r\n                        <Button type={\"submit\"} primary isPending={pending}>Add Contact</Button>\r\n                    </div>\r\n                </form>\r\n            </main>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Icon } from \"./Icon\";\r\n\r\nexport const BottomTools: React.FC<Props> = (p: Props) => (\r\n    <div className=\"bottom-tools\">\r\n        {!p.showQR ? \"\" :\r\n            <Link to={\"/qr\"} >\r\n                <div className=\"fab-btn primary bottom-center\" style={{ fontSize: \"3em\" }}>\r\n                    <img src={require(\"../assets/images/qr-scan.svg\")} alt=\"\" style={{ width: \"50%\" }} />\r\n                </div>\r\n            </Link>\r\n        }\r\n        {!p.showPlus ? \"\" :\r\n            <Link className=\"fab-btn secondary bottom-right\" style={{ fontSize: \"2em\" }}\r\n                to=\"/create\">\r\n                <Icon plus />\r\n            </Link>\r\n        }\r\n    </div>\r\n)\r\n\r\ninterface Props {\r\n    showQR?: boolean;\r\n    showPlus?: boolean;\r\n}\r\n","/**\r\n * This module handles the generic encoding and decoding of QR messages. \r\n * Domain specific codecs should implement these interfaces.\r\n * \r\n * Encoding and decoding QRs is done in two steps:\r\n * - All QR strings are first decoded to a QRX object\r\n * - The QRX object is subsequently decoded to a message object\r\n */\r\n\r\nimport { DecoderChain, DecodeResult, Decodes, DecodeStatus, Encodes, MultiDecoder } from \"./GenericDecoding\";\r\n\r\n/** The intermediate data object */\r\nexport class QRX<T> {\r\n    constructor(\r\n        readonly type: string,\r\n        readonly payload: T,\r\n    ) { }\r\n}\r\n\r\nexport interface QRStringDecoder extends Decodes<string, QRX<string>, QRDecodeError> { }\r\nexport interface QRStringEncoder extends Encodes<QRX<string>, string> { }\r\nexport interface QRDomainDecoder<T> extends Decodes<QRX<string>, QRX<T>, QRDecodeError> { }\r\nexport interface QRDomainEncoder<T> extends Encodes<T, QRX<string>> { }\r\n\r\nexport type QRDecodeResult<T> = DecodeResult<QRX<T>, QRDecodeError>;\r\n\r\n/** Helper for creating Successful QRDecodeResult */\r\nexport const decodeSucceded = <T>(result: QRX<T>): QRDecodeResult<T> => ({ status: DecodeStatus.Succeeded, result })\r\n/** Helper for creating Failed QRDecodeResult */\r\nexport const decodeFailed = <T>(error: QRDecodeError): QRDecodeResult<T> => ({ status: DecodeStatus.Failed, error })\r\n/** Helper for creating Unmatched QRDecodeResult */\r\nexport const decodeUnmatched = <T>(): QRDecodeResult<T> => ({ status: DecodeStatus.Unmatched })\r\n\r\nexport enum QRDecodeError {\r\n    INVALID_FORMAT = \"INVALID_FORMAT\",\r\n    INVALID_PAYLOAD = \"INVALID_PAYLOAD\",\r\n    UNMATCHED_TYPE = \"UNMATCHED_TYPE\",\r\n}\r\n\r\nexport class MultiQRDecoder<T> implements Decodes<string, QRX<T>, QRDecodeError> {\r\n\r\n    private decoder: Decodes<string, QRX<T>, QRDecodeError>\r\n\r\n    constructor(\r\n        stringDecoder: QRStringDecoder,\r\n        domainDecoders: QRDomainDecoder<T>[]) {\r\n\r\n        this.decoder = new DecoderChain(stringDecoder, new MultiDecoder(domainDecoders));\r\n    }\r\n\r\n    decode(str: string): QRDecodeResult<T> {\r\n        return this.decoder.decode(str);\r\n    }\r\n}\r\n","import { decodeFailed, decodeSucceded, decodeUnmatched, MultiQRDecoder, QRDecodeError, QRDecodeResult, QRDomainDecoder, QRDomainEncoder, QRStringDecoder, QRStringEncoder, QRX } from \"../modules/QR/QREncoding\";\r\n\r\nexport class SimpleQRStringCodec implements QRStringDecoder, QRStringEncoder {\r\n\r\n    encode(qrx: QRX<any>): string {\r\n        return qrx.type + \"|\" + qrx.payload;\r\n    }\r\n\r\n    decode(str: string): QRDecodeResult<string> {\r\n        const [type, payload] = str.split(\"|\");\r\n        if (!type || !payload) {\r\n            return decodeFailed(QRDecodeError.INVALID_FORMAT);\r\n        } else {\r\n            return decodeSucceded(new QRX(type, payload));\r\n        }\r\n    }\r\n}\r\n\r\nexport class VerificationOfferCodec implements QRDomainDecoder<VerificationOffer>, QRDomainEncoder<VerificationOffer> {\r\n    private TYPE = \"VerifyOffer\";\r\n\r\n    encode(payload: VerificationOffer): QRX<string> {\r\n        return new QRX(this.TYPE, JSON.stringify(payload));\r\n    }\r\n\r\n    decode(qrx: QRX<string>): QRDecodeResult<VerificationOffer> {\r\n        if (qrx.type !== this.TYPE) {\r\n            return decodeUnmatched();\r\n        }\r\n        try {\r\n            const d = JSON.parse(qrx.payload);\r\n            if (!d.mid || !d.attribute_hash || !d.attribute_value) {\r\n                return decodeFailed(QRDecodeError.INVALID_PAYLOAD);\r\n            } else {\r\n                return decodeSucceded(d);\r\n            }\r\n        } catch (e) {\r\n            return decodeFailed(QRDecodeError.INVALID_FORMAT);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface VerificationOffer {\r\n    mid: string;\r\n    attribute_name: string;\r\n    attribute_hash: string;\r\n    attribute_value: string;\r\n}\r\n\r\nexport const qrDecoder = new MultiQRDecoder(new SimpleQRStringCodec(), [new VerificationOfferCodec()])\r\n\r\nexport function makeEncoder<T>(encoder: QRDomainEncoder<T>) {\r\n    const strEncoder = new SimpleQRStringCodec();\r\n    return (payload: T) => strEncoder.encode(encoder.encode(payload));\r\n}\r\n","import React, { useMemo, useState } from 'react';\r\nimport { BottomTools } from \"../components/BottomTools\";\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\nimport { useClock } from \"../hooks/useClock\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { usePromised } from \"../hooks/usePromised\";\r\nimport { useCallbackReference } from \"../hooks/useQR\";\r\nimport { useSelector } from \"../hooks/useSelector\";\r\nimport { useServices } from \"../hooks/useServices\";\r\nimport { getAttributeByHash } from \"../services/local/selectors\";\r\nimport { makeEncoder, VerificationOfferCodec } from \"../services/QRService\";\r\n\r\nconst encodeVerifOffer = makeEncoder(new VerificationOfferCodec());\r\n\r\nexport const CredentialDetailPage: React.FC<Props> = ({ id, useReferenceQR }) => {\r\n\r\n    const { services } = useServices();\r\n    const { fromLanguageDict } = useInternationalization();\r\n    const attr = useSelector(useMemo(() => getAttributeByHash(id), [id]));\r\n    const myMid = usePromised(() => services!.ipv8Service.api.getMyId().catch(e => console.error(e)));\r\n\r\n    // The user may pick either the QR from the credential or from the attribute\r\n    const [selectedQR, setSelectedQR] = useState<string>(\"\");\r\n    const toggleQR = (name: string) => setSelectedQR(selectedQR === name ? \"\" : name);\r\n\r\n    // Once a peer scans the QR and calls us with the reference, it will invoke the onPeerScan callback.\r\n    const onPeerScan = (callbackId: string) => console.log(\"Peer called to verify \" + attr?.name, callbackId)\r\n    const onPeerScanMemoized = useMemo(() => onPeerScan, [myMid, attr, selectedQR]);\r\n    const referenceForPeer = useCallbackReference(onPeerScanMemoized, { refreshIntervalMillis: 1000 });\r\n\r\n    let qrValue = (!myMid || !selectedQR) ? \"\" : myMid + \"|\" + referenceForPeer;\r\n\r\n    const time = useClock(1000);\r\n\r\n    if (!useReferenceQR && myMid) {\r\n        const expirationInSeconds = 10;\r\n        const verificationOffer = {\r\n            mid: myMid!,\r\n            attribute_hash: attr!.hash,\r\n            attribute_value: attr!.value,\r\n            attribute_name: attr!.name,\r\n            expiresAt: time + (expirationInSeconds * 1000),\r\n        }\r\n        qrValue = (!myMid || !selectedQR) ? \"\" : encodeVerifOffer(verificationOffer);\r\n    }\r\n\r\n    return (\r\n        <div className=\"subpage nav-compact main-over-nav\">\r\n\r\n            <SubpageHeader\r\n                pageTitle={\"Credential\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main>\r\n                {!attr ? \"Credential Unknown..\" : (\r\n                    <CredentialCard\r\n                        title={fromLanguageDict(attr.title)}\r\n                        issuerName={fromLanguageDict(attr.provider.title)}\r\n                        imageUrl={attr.provider.logo_url}\r\n                        withQRs\r\n                        onDisplayQR={toggleQR}\r\n                        qrValue={qrValue}\r\n                        value={attr.value}\r\n                        showDetails={true}\r\n                        showMeta={true}\r\n                        metadata={[\r\n                            { key: \"Signed by\", value: fromLanguageDict(attr.provider.title) },\r\n                            { key: \"Created at\", value: `${attr.time}` },\r\n                            { key: \"Valid until\", value: \"2020-09-01 13:20:00 CET\" },\r\n                        ]} />\r\n                )}\r\n            </main>\r\n\r\n            <BottomTools showQR />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    id: string;\r\n    /** If set to true, will use ReferenceQRs (callback system) instead of data-QRs */\r\n    useReferenceQR?: boolean;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport function usePromised<T>(promisable: () => Promise<T>) {\r\n    const [result, setResult] = useState<T | undefined>(undefined);\r\n\r\n    useEffect(() => { promisable().then(setResult); }, []);\r\n\r\n    return result;\r\n}","import { useEffect, useState } from \"react\";\r\nimport { callbackService } from \"../services/services\";\r\n\r\n\r\nexport function useCallbackReference(callback: (callbackId: string) => any, options: Options) {\r\n\r\n    const [value, setValue] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        const handle = callbackService.register(callback);\r\n\r\n        handle.onNewReference(ref => setValue(ref.id));\r\n        handle.refreshAtInterval(options.refreshIntervalMillis);\r\n\r\n        return () => options.destroyOnUnmount ? handle.destroy() : handle.stopRefreshing();\r\n    }, [callback]);\r\n\r\n    return value;\r\n}\r\n\r\ninterface Options {\r\n    refreshIntervalMillis: number;\r\n    destroyOnUnmount?: boolean;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport function useClock(millisPerTick: number) {\r\n    const [time, setTime] = useState(Date.now());\r\n\r\n    let interval: any = null;\r\n    useEffect(() => {\r\n        setInterval(() => setTime(Date.now()), millisPerTick);\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n\r\n    return time;\r\n}\r\n","\r\nimport React from \"react\";\r\nimport { useMenu } from \"../hooks/useMenu\";\r\nimport { Icon } from \"./Icon\";\r\n\r\n\r\nexport const HomepageHeader: React.FC<Omit<Props, \"openMenu\">> = (p) => {\r\n    const { setOpen } = useMenu();\r\n\r\n    return <HomepageHeaderNo openMenu={() => setOpen(true)} {...p} />\r\n}\r\n\r\nexport const HomepageHeaderNo: React.FC<Props> = (p: Props) => (\r\n    <div>\r\n        <header>\r\n            <div className=\"content\">\r\n                <div className=\"avatar\">\r\n                    <img src=\"./assets/images/user-colored.svg\" alt=\"\" />\r\n                </div>\r\n                <div className=\"text\">\r\n                    <div className=\"primary\">Tim Speelman</div>\r\n                    <div className=\"secondary\">Self-Sovereign Identity</div>\r\n                </div>\r\n                <div className=\"burger-menu\" onClick={p.openMenu}>\r\n                    <Icon bars />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"background\"></div>\r\n        </header>\r\n\r\n        <div className=\"after-header\"> </div>\r\n    </div>\r\n)\r\n\r\ninterface Props {\r\n    openMenu: () => any;\r\n}\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { BottomTools } from \"../components/BottomTools\";\r\nimport { CredentialCard } from \"../components/CredentialCard\";\r\nimport { HomepageHeader } from \"../components/HomepageHeader\";\r\nimport { useInternationalization } from \"../hooks/useInternationalization\";\r\nimport { useSelector } from \"../hooks/useSelector\";\r\nimport { getAttributes } from \"../services/local/selectors\";\r\nimport { LocalAttr } from \"../types/types\";\r\n\r\nexport const CredentialIndexPage: React.FC = () => {\r\n\r\n    const attributes = useSelector(getAttributes);\r\n    const { fromLanguageDict } = useInternationalization();\r\n\r\n    return (\r\n        <div>\r\n            <HomepageHeader />\r\n\r\n            <main>\r\n                <h1>Credentials</h1>\r\n                {attributes.map(c =>\r\n                    <Link to={`/detail/${encodeURIComponent(c.hash)}`} key={c.hash}>\r\n                        <CredentialCard\r\n                            imageUrl={c.provider.logo_url}\r\n                            title={fromLanguageDict(c.title)}\r\n                            issuerName={fromLanguageDict(c.provider.title)}\r\n                        />\r\n                    </Link>\r\n                )}\r\n            </main>\r\n\r\n            <BottomTools showQR={true} showPlus={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// export class CredentialIndexPage extends React.Component<{}, State> {\r\n\r\n//     state: State = {\r\n//         attributes: []\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.loadAttributes();\r\n//     }\r\n\r\n//     async loadAttributes() {\r\n//         const attributes = await attributeQuery.listAttributes();\r\n//         this.setState({ attributes });\r\n//     }\r\n\r\n//     render() {\r\n//         const lang = \"nl_NL\";\r\n//         const { attributes } = this.state;\r\n\r\n//         return (\r\n//             <div>\r\n//                 <HomepageHeader />\r\n\r\n//                 <main>\r\n//                     <h1>Credentials</h1>\r\n//                     {attributes.map(c =>\r\n//                         <Link to={`/detail/${encodeURIComponent(c.hash)}`} key={c.hash}>\r\n//                             <CredentialCard\r\n//                                 imageUrl={c.provider.logo_url}\r\n//                                 title={c.title[lang]}\r\n//                                 issuerName={c.provider.title[lang]}\r\n//                             />\r\n//                         </Link>\r\n//                     )}\r\n//                 </main>\r\n\r\n//                 <BottomTools showQR={true} showPlus={true} />\r\n\r\n//             </div>\r\n//         )\r\n\r\n//     }\r\n// }\r\n\r\ninterface State {\r\n    attributes: LocalAttr[];\r\n}\r\n","import QRCode from \"qrcode.react\";\r\nimport React, { useState } from 'react';\r\nimport QrReader from \"react-qr-reader\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"../components/Button\";\r\nimport { Icon } from \"../components/Icon\";\r\nimport { SubpageHeader } from \"../components/SubpageHeader\";\r\n\r\nexport const QrReaderPage: React.FC<Props> = ({ onScanQR }) => {\r\n\r\n    const [lastScan, setLastScan] = useState<string>(\"\");\r\n    const handleScan = (data: string | null) => {\r\n        if (data) {\r\n            setLastScan(data);\r\n        }\r\n    }\r\n\r\n    const handleError = (err: any) => {\r\n        console.error(err)\r\n    }\r\n\r\n    const [manualInput, setManualInput] = useState<string>(\"\");\r\n    const [showManual, setShowManual] = useState<boolean>(false);\r\n\r\n    return (\r\n        <div className=\"subpage nav-compact\">\r\n            <SubpageHeader\r\n                pageTitle={\"Scan QR\"}\r\n                backUrl={\"/\"}\r\n            />\r\n\r\n            <main className={\"text-center\"}>\r\n                <h1>Scan a QR</h1>\r\n\r\n                {!showManual ? (\r\n                    !lastScan ? (\r\n                        <div>\r\n                            <p>Find or draw a <Icon qrcode /> and scan it.</p>\r\n                            <QrReader\r\n                                delay={300}\r\n                                onError={handleError}\r\n                                onScan={handleScan}\r\n                                style={{ width: '100%' }}\r\n                            />\r\n                            <p className=\"clickable\" onClick={() => setShowManual(true)}>Or try entering manually</p>\r\n                        </div>\r\n                    ) : (\r\n                            <div>\r\n                                <p>I got this:</p>\r\n                                <QRCode value={lastScan} size={256} level={\"M\"} />\r\n                                <p>Meaning: <code>{lastScan}</code></p>\r\n                                <Button primary onClick={() => onScanQR(lastScan)}>Submit</Button>\r\n                                <Button onClick={() => setLastScan(\"\")}>Try again</Button>\r\n                            </div>\r\n                        )\r\n                ) : (\r\n                        <form onSubmit={() => onScanQR(manualInput)}>\r\n                            <div className=\"col-xs-12\">\r\n                                <input type=\"text\" className=\"text-input\" placeholder=\"Enter the QR value\"\r\n                                    required value={manualInput} onChange={(e) => setManualInput(e.target.value)} />\r\n                                <br />\r\n                                <br />\r\n                                <Button type={\"submit\"} primary>Submit</Button>\r\n                                <Button onClick={() => setShowManual(false)}>Cancel</Button>\r\n\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n\r\n                <br /><br />\r\n                <Link to={\"/\"}><Button>Never mind</Button></Link>\r\n\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    onScanQR: (qr: string) => any;\r\n}\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch, useHistory, useParams } from \"react-router-dom\";\r\nimport './assets/css/font-awesome.min.css';\r\nimport './assets/css/index.css';\r\nimport { Sidemenu } from \"./components/Sidemenu\";\r\nimport { DemoPage } from \"./demo\";\r\nimport { CredentialCreateFlow } from \"./flows/CredentialCreateFlow\";\r\nimport { CredentialVerifyFlow } from \"./flows/CredentialVerifyFlow\";\r\nimport { useServices } from \"./hooks/useServices\";\r\nimport { DecodeStatus } from \"./modules/QR/GenericDecoding\";\r\nimport { ConfirmContactPage } from \"./pages/ConfirmContactPage\";\r\nimport { ConfirmIncomingVerificationPage } from \"./pages/ConfirmIncomingVerificationPage\";\r\nimport { ContactDetailPage } from \"./pages/ContactDetailPage\";\r\nimport { ContactIndexPage } from \"./pages/ContactIndexPage\";\r\nimport { CredentialDetailPage } from \"./pages/CredentialDetailPage\";\r\nimport { CredentialIndexPage } from \"./pages/CredentialIndexPage\";\r\nimport { QrReaderPage } from \"./pages/QrReaderPage\";\r\nimport { qrDecoder } from \"./services/QRService\";\r\n\r\nexport const App: React.FC = () => <Router><AppBody /></Router>\r\n\r\nexport const AppBody: React.FC = () => {\r\n\r\n    const { ready, error } = useServices();\r\n\r\n    const history = useHistory();\r\n    const onScanQR = (val: string) => {\r\n        const res = qrDecoder.decode(val);\r\n        if (res.status === DecodeStatus.Succeeded) {\r\n            history.push(\"/verify/\" + encodeURIComponent(JSON.stringify(res.result)));\r\n        }\r\n    }\r\n\r\n    return !ready ? (error ? <div>Oops! Is the localhost offline?</div> : <div>Connecting to services..</div>) : (\r\n        <div>\r\n            <Sidemenu />\r\n\r\n            <Switch>\r\n                <Route path=\"/x\"><DemoPage /></Route>\r\n                <Route path=\"/create\"><CredentialCreateFlow /></Route>\r\n                <Route path=\"/verify/:offer\"><SpecificCredentialVerifyFlow /></Route>\r\n                <Route path=\"/detail/:id\"><SpecificCredentialDetailPage /></Route>\r\n                <Route path=\"/contacts/:mid\"><SpecificContactDetailPage /></Route>\r\n                <Route path=\"/contacts\"><ContactIndexPage /></Route>\r\n                <Route path=\"/confirm-contact\"><ConfirmContactPage /></Route>\r\n                <Route path=\"/confirm-verify\"><ConfirmIncomingVerificationPage /></Route>\r\n                <Route path=\"/qr\"><QrReaderPage onScanQR={onScanQR} /></Route>\r\n                <Route path=\"/\"><CredentialIndexPage /></Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction SpecificCredentialVerifyFlow() {\r\n    let params: any = useParams();\r\n    return <CredentialVerifyFlow verifyOffer={JSON.parse(decodeURIComponent(params.offer))} />\r\n}\r\n\r\nfunction SpecificCredentialDetailPage() {\r\n    let params: any = useParams();\r\n    return <CredentialDetailPage id={decodeURIComponent(params.id)} />\r\n}\r\n\r\nfunction SpecificContactDetailPage() {\r\n    let params: any = useParams();\r\n    return <ContactDetailPage providerMid={decodeURIComponent(params.mid)} />\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from \"./App\";\nimport { I18nContextProvider } from \"./hooks/useInternationalization\";\nimport { LocalStateContextProvider } from \"./hooks/useLocalState\";\nimport { MenuContextProvider } from \"./hooks/useMenu\";\nimport { ServicesContextProvider } from \"./hooks/useServices\";\nimport { initServices, localhostBase, localState } from \"./services/services\";\nimport * as serviceWorker from './serviceWorker';\n\nconst root = (\n    <ServicesContextProvider initServices={initServices} path={localhostBase}>\n        <MenuContextProvider>\n            <I18nContextProvider fallbackLangs={[\"en_US\", \"en_UK\"]}>\n                <LocalStateContextProvider localState={localState}>\n                    <App />\n                </LocalStateContextProvider>\n            </I18nContextProvider>\n        </MenuContextProvider>\n    </ServicesContextProvider>\n);\n\nReactDOM.render(root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}